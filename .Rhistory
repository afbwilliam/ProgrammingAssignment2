makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() x
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
print(inv)
} else {
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
## Return a matrix that is the inverse of 'x'
}
matrix<-matrix(C(4,7,2,6),nrow=2,ncol=2)
matrix <-matrix(c(1,1,1,1),nrow=2,ncol=2)
matrix <-matrix(c(4,7,2,6),nrow=2,ncol=2)
matrix<-matrix(c(4,7,2,6),nrow=2,ncol=2)
matrix<-matrix(C(4,7,2,6),nrow=2,ncol=2)
matrix
solve(matrix)
a <- makeCacheMatrix(matrix)
getwd()
setwd("C:/Users/William Bradley/Documents/Important data/R programming/ProgrammingAssignment2")
source("cachmatrix.R")
source("cachematrix.R")
source("cachematrix.R")
cachesolve(a)
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
cacheSolve(a)
a$getinverse()
b<-makeCacheMatrix(matrix)
b$set(matrix)
b$getinverse
b$getinverse()
source("cachematrix.R")
b$getinverse()
b$getinverse()
b$getinverse()
b$getinverse()
source("cachematrix.R")
b$getinverse()
b$getinverse()
makeCacheMatrix(matrix)$getinverse()
b<-makeCacheMatrix(matrix)
b$get()
b$getinverse()
cacheSolve(b)
cacheSolve(b)
cacheSolve(b)
cacheSolve(b)
source("cachematrix.R")
b<-makeCacheMatrix(matrix)
cacheSolve(b)
cacheSolve(b)
cacheSolve(b)
